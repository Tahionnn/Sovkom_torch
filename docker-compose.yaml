services:
  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - monitoring
    restart: unless-stopped

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    ports:
      - "9080:9080"
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      #- ./promtail:/etc/promtail
      - ./promtail-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/promtail-config.yaml
    networks:
      - monitoring
    depends_on:
      - loki
    restart: unless-stopped

  #prometheus:
  #  image: prom/prometheus:latest
  #  container_name: prometheus
  #  ports:
  #    - "9090:9090"
  #  volumes:
  #    - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
  #    - prometheus_data:/prometheus
  #  networks:
  #    - monitoring
  #  restart: unless-stopped
  
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - monitoring
    depends_on:
      - prometheus
    restart: unless-stopped 
  
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: data123
      POSTGRES_DB: halvaBank
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data/pgdata
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    command: >
      postgres -c max_connections=1000
               -c shared_buffers=256MB
               -c effective_cache_size=768MB
               -c maintenance_work_mem=64MB
               -c checkpoint_completion_target=0.7
               -c wal_buffers=16MB
               -c default_statistics_target=100
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres_user -d postgres_db" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true
    networks:
      - backend

  goapp:
    build: 
      context: ./API
      dockerfile: Dockerfile 
      target: production-stage
    container_name: goapp
    restart: always
    depends_on:
      - postgres
    environment:
      DB_HOST: localhost  
    ports:
      - "8080:8080"
    networks:
      - backend

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    ports:
      - "80:80"
    depends_on:
      - postgres
      - goapp
      - ml

volumes:
  loki_data:
  prometheus_data:
  grafana_data:
  pgdata:

networks:
  backend-network:
  frontend-network:
  monitoring: