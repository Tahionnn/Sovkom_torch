services:
  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - monitoring
    restart: unless-stopped

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    ports:
      - "9080:9080"
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      #- ./promtail:/etc/promtail
      - ./promtail-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    networks:
      - monitoring
    depends_on:
      - loki
    restart: unless-stopped

  #prometheus:
  #  image: prom/prometheus:latest
  #  container_name: prometheus
  #  ports:
  #    - "9090:9090"
  #  volumes:
  #    - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
  #    - prometheus_data:/prometheus
  #  networks:
  #    - monitoring
  #  restart: unless-stopped
  
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - monitoring
    restart: unless-stopped 
  
  db:
    image: postgres:16
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: data123
      POSTGRES_DB: halvaBank
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data  
    networks:
      - backend-network

  ml:
    build: 
      context: ./backend_ai/app
      dockerfile: Dockerfile 
    container_name: ml
    restart: always
    ports:
      - "8000:8000"
    networks:
      - backend-network
  goapp:
    build: 
      context: ./API
      dockerfile: Dockerfile 
      target: production-stage
    container_name: goapp
    restart: always
    depends_on:
      - db
    environment:
      DB_HOST: localhost  
    ports:
      - "8080:8080"
    networks:
      - backend-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    ports:
      - "81:81"
    depends_on:
      - db
      - goapp
      - ml

volumes:
  loki_data:
  prometheus_data:
  grafana_data:
  pgdata:

networks:
  backend-network:
  frontend-network:
  monitoring: